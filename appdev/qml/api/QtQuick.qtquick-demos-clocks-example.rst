QtQuick.qtquick-demos-clocks-example
====================================

.. raw:: html

   <p class="centerAlign">

.. raw:: html

   </p>

.. raw:: html

   <p>

Clocks demonstrates using a ListView type to display data generated by a
ListModel. The delegate used by the model is specified as a custom QML
type that is specified in the Clock.qml file.

.. raw:: html

   </p>

.. raw:: html

   <p>

JavaScript methods are used to fetch the current time in several cities
in different time zones and QML types are used to display the time on a
clock face with animated clock hands.

.. raw:: html

   </p>

.. raw:: html

   <h2 id="running-the-example">

Running the Example

.. raw:: html

   </h2>

.. raw:: html

   <p>

To run the example from Qt Creator, open the Welcome mode and select the
example from Examples. For more information, visit Building and Running
an Example.

.. raw:: html

   </p>

.. raw:: html

   <h2 id="displaying-data-generated-by-list-models">

Displaying Data Generated by List Models

.. raw:: html

   </h2>

.. raw:: html

   <p>

In the clocks.qml file, we use a Rectangle type to create the
application main window:

.. raw:: html

   </p>

.. raw:: html

   <pre class="qml"><span class="type"><a href="QtQuick.Rectangle.md">Rectangle</a></span> {
   <span class="name">id</span>: <span class="name">root</span>
   <span class="name">width</span>: <span class="number">640</span>; <span class="name">height</span>: <span class="number">320</span>
   <span class="name">color</span>: <span class="string">&quot;#646464&quot;</span></pre>

.. raw:: html

   <p>

We use a ListView type to display a list of the items provided by a
ListModel type:

.. raw:: html

   </p>

.. raw:: html

   <pre class="qml">    <span class="type"><a href="QtQuick.ListView.md">ListView</a></span> {
   <span class="name">id</span>: <span class="name">clockview</span>
   <span class="name">anchors</span>.fill: <span class="name">parent</span>
   <span class="name">orientation</span>: <span class="name">ListView</span>.<span class="name">Horizontal</span>
   <span class="name">cacheBuffer</span>: <span class="number">2000</span>
   <span class="name">snapMode</span>: <span class="name">ListView</span>.<span class="name">SnapOneItem</span>
   <span class="name">highlightRangeMode</span>: <span class="name">ListView</span>.<span class="name">ApplyRange</span>
   <span class="name">delegate</span>: <span class="name">Content</span>.Clock { <span class="name">city</span>: <span class="name">cityName</span>; <span class="name">shift</span>: <span class="name">timeShift</span> }
   <span class="name">model</span>: <span class="name">ListModel</span> {
   <span class="type">ListElement</span> { <span class="name">cityName</span>: <span class="string">&quot;New York&quot;</span>; <span class="name">timeShift</span>: -<span class="number">4</span> }
   <span class="type">ListElement</span> { <span class="name">cityName</span>: <span class="string">&quot;London&quot;</span>; <span class="name">timeShift</span>: <span class="number">0</span> }
   <span class="type">ListElement</span> { <span class="name">cityName</span>: <span class="string">&quot;Oslo&quot;</span>; <span class="name">timeShift</span>: <span class="number">1</span> }
   <span class="type">ListElement</span> { <span class="name">cityName</span>: <span class="string">&quot;Mumbai&quot;</span>; <span class="name">timeShift</span>: <span class="number">5.5</span> }
   <span class="type">ListElement</span> { <span class="name">cityName</span>: <span class="string">&quot;Tokyo&quot;</span>; <span class="name">timeShift</span>: <span class="number">9</span> }
   <span class="type">ListElement</span> { <span class="name">cityName</span>: <span class="string">&quot;Brisbane&quot;</span>; <span class="name">timeShift</span>: <span class="number">10</span> }
   <span class="type">ListElement</span> { <span class="name">cityName</span>: <span class="string">&quot;Los Angeles&quot;</span>; <span class="name">timeShift</span>: -<span class="number">8</span> }
   }
   }</pre>

.. raw:: html

   <p>

List elements are defined like other QML types except that they contain
a collection of role definitions instead of properties. Roles both
define how the data is accessed and include the data itself.

.. raw:: html

   </p>

.. raw:: html

   <p>

For each list element, we use the cityName role to specify the name of a
city and the timeShift role to specify a time zone as a positive or
negative offset from UTC (coordinated universal time).

.. raw:: html

   </p>

.. raw:: html

   <p>

The Clock custom type is used as the ListView's delegate, defining the
visual appearance of list items. To use the Clock type, we add an import
statement that imports the folder called content where the type is
located:

.. raw:: html

   </p>

.. raw:: html

   <pre class="qml">import &quot;content&quot; as Content</pre>

.. raw:: html

   <p>

We use an Image type to display arrows that indicate whether users can
flick the view to see more clocks on the left or right:

.. raw:: html

   </p>

.. raw:: html

   <pre class="qml">    <span class="type"><a href="QtQuick.Image.md">Image</a></span> {
   <span class="name">anchors</span>.left: <span class="name">parent</span>.<span class="name">left</span>
   <span class="name">anchors</span>.bottom: <span class="name">parent</span>.<span class="name">bottom</span>
   <span class="name">anchors</span>.margins: <span class="number">10</span>
   <span class="name">source</span>: <span class="string">&quot;content/arrow.png&quot;</span>
   <span class="name">rotation</span>: -<span class="number">90</span>
   <span class="name">opacity</span>: <span class="name">clockview</span>.<span class="name">atXBeginning</span> ? <span class="number">0</span> : <span class="number">0.5</span>
   Behavior on <span class="name">opacity</span> { <span class="type"><a href="QtQuick.NumberAnimation.md">NumberAnimation</a></span> { <span class="name">duration</span>: <span class="number">500</span> } }
   }
   <span class="type"><a href="QtQuick.Image.md">Image</a></span> {
   <span class="name">anchors</span>.right: <span class="name">parent</span>.<span class="name">right</span>
   <span class="name">anchors</span>.bottom: <span class="name">parent</span>.<span class="name">bottom</span>
   <span class="name">anchors</span>.margins: <span class="number">10</span>
   <span class="name">source</span>: <span class="string">&quot;content/arrow.png&quot;</span>
   <span class="name">rotation</span>: <span class="number">90</span>
   <span class="name">opacity</span>: <span class="name">clockview</span>.<span class="name">atXEnd</span> ? <span class="number">0</span> : <span class="number">0.5</span>
   Behavior on <span class="name">opacity</span> { <span class="type"><a href="QtQuick.NumberAnimation.md">NumberAnimation</a></span> { <span class="name">duration</span>: <span class="number">500</span> } }
   }
   }</pre>

.. raw:: html

   <p>

We use the opacity property to hide the arrows when the list view is
located at the beginning or end of the x axis.

.. raw:: html

   </p>

.. raw:: html

   <p>

In Clock.qml, we define a timeChanged() function in which we use methods
from the JavaScript Date object to fetch the current time in UTC and to
adjust it to the correct time zone:

.. raw:: html

   </p>

.. raw:: html

   <pre class="qml">    <span class="keyword">function</span> <span class="name">timeChanged</span>() {
   var <span class="name">date</span> = new <span class="name">Date</span>;
   <span class="name">hours</span> <span class="operator">=</span> <span class="name">internationalTime</span> ? <span class="name">date</span>.<span class="name">getUTCHours</span>() <span class="operator">+</span> <span class="name">Math</span>.<span class="name">floor</span>(<span class="name">clock</span>.<span class="name">shift</span>) : <span class="name">date</span>.<span class="name">getHours</span>()
   <span class="name">night</span> <span class="operator">=</span> ( <span class="name">hours</span> <span class="operator">&lt;</span> <span class="number">7</span> <span class="operator">||</span> <span class="name">hours</span> <span class="operator">&gt;</span> <span class="number">19</span> )
   <span class="name">minutes</span> <span class="operator">=</span> <span class="name">internationalTime</span> ? <span class="name">date</span>.<span class="name">getUTCMinutes</span>() <span class="operator">+</span> ((<span class="name">clock</span>.<span class="name">shift</span> <span class="operator">%</span> <span class="number">1</span>) <span class="operator">*</span> <span class="number">60</span>) : <span class="name">date</span>.<span class="name">getMinutes</span>()
   <span class="name">seconds</span> <span class="operator">=</span> <span class="name">date</span>.<span class="name">getUTCSeconds</span>();
   }</pre>

.. raw:: html

   <p>

We use a Timer type to update the time at intervals of 100 milliseconds:

.. raw:: html

   </p>

.. raw:: html

   <pre class="qml">    <span class="type">Timer</span> {
   <span class="name">interval</span>: <span class="number">100</span>; <span class="name">running</span>: <span class="number">true</span>; <span class="name">repeat</span>: <span class="number">true</span>;
   <span class="name">onTriggered</span>: <span class="name">clock</span>.<span class="name">timeChanged</span>()
   }</pre>

.. raw:: html

   <p>

We use Image types within an Item type to display the time on an analog
clock face. Different images are used for daytime and nighttime hours:

.. raw:: html

   </p>

.. raw:: html

   <pre class="qml">    <span class="type"><a href="QtQuick.Item.md">Item</a></span> {
   <span class="name">anchors</span>.centerIn: <span class="name">parent</span>
   <span class="name">width</span>: <span class="number">200</span>; <span class="name">height</span>: <span class="number">240</span>
   <span class="type"><a href="QtQuick.Image.md">Image</a></span> { <span class="name">id</span>: <span class="name">background</span>; <span class="name">source</span>: <span class="string">&quot;clock.png&quot;</span>; <span class="name">visible</span>: <span class="name">clock</span>.<span class="name">night</span> <span class="operator">==</span> <span class="number">false</span> }
   <span class="type"><a href="QtQuick.Image.md">Image</a></span> { <span class="name">source</span>: <span class="string">&quot;clock-night.png&quot;</span>; <span class="name">visible</span>: <span class="name">clock</span>.<span class="name">night</span> <span class="operator">==</span> <span class="number">true</span> }</pre>

.. raw:: html

   <p>

A Rotation transform applied to Image types provides a way to rotate the
clock hands. The origin property holds the point that stays fixed
relative to the parent as the rest of the item rotates. The angle
property determines the angle to rotate the hands in degrees clockwise.

.. raw:: html

   </p>

.. raw:: html

   <pre class="qml">        <span class="type"><a href="QtQuick.Image.md">Image</a></span> {
   <span class="name">x</span>: <span class="number">92.5</span>; <span class="name">y</span>: <span class="number">27</span>
   <span class="name">source</span>: <span class="string">&quot;hour.png&quot;</span>
   <span class="name">transform</span>: <span class="name">Rotation</span> {
   <span class="name">id</span>: <span class="name">hourRotation</span>
   <span class="name">origin</span>.x: <span class="number">7.5</span>; <span class="name">origin</span>.y: <span class="number">73</span>;
   <span class="name">angle</span>: (<span class="name">clock</span>.<span class="name">hours</span> <span class="operator">*</span> <span class="number">30</span>) <span class="operator">+</span> (<span class="name">clock</span>.<span class="name">minutes</span> <span class="operator">*</span> <span class="number">0.5</span>)
   Behavior on <span class="name">angle</span> {
   <span class="type"><a href="QtQuick.SpringAnimation.md">SpringAnimation</a></span> { <span class="name">spring</span>: <span class="number">2</span>; <span class="name">damping</span>: <span class="number">0.2</span>; <span class="name">modulus</span>: <span class="number">360</span> }
   }
   }
   }
   <span class="type"><a href="QtQuick.Image.md">Image</a></span> {
   <span class="name">x</span>: <span class="number">93.5</span>; <span class="name">y</span>: <span class="number">17</span>
   <span class="name">source</span>: <span class="string">&quot;minute.png&quot;</span>
   <span class="name">transform</span>: <span class="name">Rotation</span> {
   <span class="name">id</span>: <span class="name">minuteRotation</span>
   <span class="name">origin</span>.x: <span class="number">6.5</span>; <span class="name">origin</span>.y: <span class="number">83</span>;
   <span class="name">angle</span>: <span class="name">clock</span>.<span class="name">minutes</span> <span class="operator">*</span> <span class="number">6</span>
   Behavior on <span class="name">angle</span> {
   <span class="type"><a href="QtQuick.SpringAnimation.md">SpringAnimation</a></span> { <span class="name">spring</span>: <span class="number">2</span>; <span class="name">damping</span>: <span class="number">0.2</span>; <span class="name">modulus</span>: <span class="number">360</span> }
   }
   }
   }
   <span class="type"><a href="QtQuick.Image.md">Image</a></span> {
   <span class="name">x</span>: <span class="number">97.5</span>; <span class="name">y</span>: <span class="number">20</span>
   <span class="name">source</span>: <span class="string">&quot;second.png&quot;</span>
   <span class="name">transform</span>: <span class="name">Rotation</span> {
   <span class="name">id</span>: <span class="name">secondRotation</span>
   <span class="name">origin</span>.x: <span class="number">2.5</span>; <span class="name">origin</span>.y: <span class="number">80</span>;
   <span class="name">angle</span>: <span class="name">clock</span>.<span class="name">seconds</span> <span class="operator">*</span> <span class="number">6</span>
   Behavior on <span class="name">angle</span> {
   <span class="type"><a href="QtQuick.SpringAnimation.md">SpringAnimation</a></span> { <span class="name">spring</span>: <span class="number">2</span>; <span class="name">damping</span>: <span class="number">0.2</span>; <span class="name">modulus</span>: <span class="number">360</span> }
   }
   }
   }
   <span class="type"><a href="QtQuick.Image.md">Image</a></span> {
   <span class="name">anchors</span>.centerIn: <span class="name">background</span>; <span class="name">source</span>: <span class="string">&quot;center.png&quot;</span>
   }</pre>

.. raw:: html

   <p>

We use a Behavior type on the angle property to apply a SpringAnimation
when the time changes. The spring and damping properties enable the
spring-like motion of the clock hands, and a modulus of 360 makes the
animation target values wrap around at a full circle.

.. raw:: html

   </p>

.. raw:: html

   <p>

We use a Text type to display the city name below the clock:

.. raw:: html

   </p>

.. raw:: html

   <pre class="qml">        <span class="type"><a href="QtQuick.Text.md">Text</a></span> {
   <span class="name">id</span>: <span class="name">cityLabel</span>
   <span class="name">y</span>: <span class="number">210</span>; <span class="name">anchors</span>.horizontalCenter: <span class="name">parent</span>.<span class="name">horizontalCenter</span>
   <span class="name">color</span>: <span class="string">&quot;white&quot;</span>
   <span class="name">font</span>.family: <span class="string">&quot;Helvetica&quot;</span>
   <span class="name">font</span>.bold: <span class="number">true</span>; <span class="name">font</span>.pixelSize: <span class="number">16</span>
   <span class="name">style</span>: <span class="name">Text</span>.<span class="name">Raised</span>; <span class="name">styleColor</span>: <span class="string">&quot;black&quot;</span>
   }</pre>

.. raw:: html

   <p>

Files:

.. raw:: html

   </p>

.. raw:: html

   <ul>

.. raw:: html

   <li>

demos/clocks/clocks.qml

.. raw:: html

   </li>

.. raw:: html

   <li>

demos/clocks/content/Clock.qml

.. raw:: html

   </li>

.. raw:: html

   <li>

demos/clocks/main.cpp

.. raw:: html

   </li>

.. raw:: html

   <li>

demos/clocks/clocks.pro

.. raw:: html

   </li>

.. raw:: html

   <li>

demos/clocks/clocks.qmlproject

.. raw:: html

   </li>

.. raw:: html

   <li>

demos/clocks/clocks.qrc

.. raw:: html

   </li>

.. raw:: html

   </ul>

.. raw:: html

   <p>

See also QML Applications.

.. raw:: html

   </p>

.. raw:: html

   <!-- @@@demos/clocks -->
