QtQuick.Particles.ParticleSystem
================================

.. raw:: html

   <p>

A system which includes particle painter, emitter, and affector types
More...

.. raw:: html

   </p>

.. raw:: html

   <!-- @@@ParticleSystem -->

.. raw:: html

   <table class="alignedsummary">

.. raw:: html

   <tr>

.. raw:: html

   <td class="memItemLeft rightAlign topAlign">

Import Statement:

.. raw:: html

   </td>

.. raw:: html

   <td class="memItemRight bottomAlign">

import QtQuick.Particles 2.0

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   </table>

.. raw:: html

   <ul>

.. raw:: html

   </ul>

.. raw:: html

   <h2 id="properties">

Properties

.. raw:: html

   </h2>

.. raw:: html

   <ul>

.. raw:: html

   <li class="fn">

empty : bool

.. raw:: html

   </li>

.. raw:: html

   <li class="fn">

particleStates : list<Sprite>

.. raw:: html

   </li>

.. raw:: html

   <li class="fn">

paused : bool

.. raw:: html

   </li>

.. raw:: html

   <li class="fn">

running : bool

.. raw:: html

   </li>

.. raw:: html

   </ul>

.. raw:: html

   <h2 id="methods">

Methods

.. raw:: html

   </h2>

.. raw:: html

   <ul>

.. raw:: html

   <li class="fn">

void pause()

.. raw:: html

   </li>

.. raw:: html

   <li class="fn">

void reset()

.. raw:: html

   </li>

.. raw:: html

   <li class="fn">

void restart()

.. raw:: html

   </li>

.. raw:: html

   <li class="fn">

void resume()

.. raw:: html

   </li>

.. raw:: html

   <li class="fn">

void start()

.. raw:: html

   </li>

.. raw:: html

   <li class="fn">

void stop()

.. raw:: html

   </li>

.. raw:: html

   </ul>

.. raw:: html

   <!-- $$$ParticleSystem-description -->

.. raw:: html

   <h2 id="details">

Detailed Description

.. raw:: html

   </h2>

.. raw:: html

   </p>

.. raw:: html

   <!-- @@@ParticleSystem -->

.. raw:: html

   <h2>

Property Documentation

.. raw:: html

   </h2>

.. raw:: html

   <!-- $$$empty -->

.. raw:: html

   <table class="qmlname">

.. raw:: html

   <tr valign="top" id="empty-prop">

.. raw:: html

   <td class="tblQmlPropNode">

.. raw:: html

   <p>

empty : bool

.. raw:: html

   </p>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   </table>

.. raw:: html

   <p>

empty is set to true when there are no live particles left in the
system.

.. raw:: html

   </p>

.. raw:: html

   <p>

You can use this to pause the system, keeping it from spending any time
updating, but you will need to resume it in order for additional
particles to be generated by the system.

.. raw:: html

   </p>

.. raw:: html

   <p>

To kill all the particles in the system, use an Age affector.

.. raw:: html

   </p>

.. raw:: html

   <!-- @@@empty -->

.. raw:: html

   <table class="qmlname">

.. raw:: html

   <tr valign="top" id="particleStates-prop">

.. raw:: html

   <td class="tblQmlPropNode">

.. raw:: html

   <p>

particleStates : list<Sprite>

.. raw:: html

   </p>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   </table>

.. raw:: html

   <p>

You can define a sub-set of particle groups in this property in order to
provide them with stochastic state transitions.

.. raw:: html

   </p>

.. raw:: html

   <p>

Each QtQuick::Sprite in this list is interpreted as corresponding to the
particle group with ths same name. Any transitions defined in these
sprites will take effect on the particle groups as well. Additionally
TrailEmitters, Affectors and ParticlePainters definined inside one of
these sprites are automatically associated with the corresponding
particle group.

.. raw:: html

   </p>

.. raw:: html

   <!-- @@@particleStates -->

.. raw:: html

   <table class="qmlname">

.. raw:: html

   <tr valign="top" id="paused-prop">

.. raw:: html

   <td class="tblQmlPropNode">

.. raw:: html

   <p>

paused : bool

.. raw:: html

   </p>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   </table>

.. raw:: html

   <p>

If paused is set to true, the particle system will not advance the
simulation. When paused is set to false again, the simulation will
resume from the same point it was paused.

.. raw:: html

   </p>

.. raw:: html

   <p>

The simulation will automatically pause if it detects that there are no
live particles left, and unpause when new live particles are added.

.. raw:: html

   </p>

.. raw:: html

   <p>

It can also be controlled with the pause() and resume() methods.

.. raw:: html

   </p>

.. raw:: html

   <!-- @@@paused -->

.. raw:: html

   <table class="qmlname">

.. raw:: html

   <tr valign="top" id="running-prop">

.. raw:: html

   <td class="tblQmlPropNode">

.. raw:: html

   <p>

running : bool

.. raw:: html

   </p>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   </table>

.. raw:: html

   <p>

If running is set to false, the particle system will stop the
simulation. All particles will be destroyed when the system is set to
running again.

.. raw:: html

   </p>

.. raw:: html

   <p>

It can also be controlled with the start() and stop() methods.

.. raw:: html

   </p>

.. raw:: html

   <!-- @@@running -->

.. raw:: html

   <h2>

Method Documentation

.. raw:: html

   </h2>

.. raw:: html

   <!-- $$$pause -->

.. raw:: html

   <table class="qmlname">

.. raw:: html

   <tr valign="top" id="pause-method">

.. raw:: html

   <td class="tblQmlFuncNode">

.. raw:: html

   <p>

void pause()

.. raw:: html

   </p>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   </table>

.. raw:: html

   <p>

Pauses the simulation if it is running.

.. raw:: html

   </p>

.. raw:: html

   <p>

See also resume and paused.

.. raw:: html

   </p>

.. raw:: html

   <!-- @@@pause -->

.. raw:: html

   <table class="qmlname">

.. raw:: html

   <tr valign="top" id="reset-method">

.. raw:: html

   <td class="tblQmlFuncNode">

.. raw:: html

   <p>

void reset()

.. raw:: html

   </p>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   </table>

.. raw:: html

   <p>

Discards all currently existing particles.

.. raw:: html

   </p>

.. raw:: html

   <!-- @@@reset -->

.. raw:: html

   <table class="qmlname">

.. raw:: html

   <tr valign="top" id="restart-method">

.. raw:: html

   <td class="tblQmlFuncNode">

.. raw:: html

   <p>

void restart()

.. raw:: html

   </p>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   </table>

.. raw:: html

   <p>

Stops the simulation if it is running, and then starts it.

.. raw:: html

   </p>

.. raw:: html

   <p>

See also start, stop, and running.

.. raw:: html

   </p>

.. raw:: html

   <!-- @@@restart -->

.. raw:: html

   <table class="qmlname">

.. raw:: html

   <tr valign="top" id="resume-method">

.. raw:: html

   <td class="tblQmlFuncNode">

.. raw:: html

   <p>

void resume()

.. raw:: html

   </p>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   </table>

.. raw:: html

   <p>

Resumes the simulation if it is paused.

.. raw:: html

   </p>

.. raw:: html

   <p>

See also pause and paused.

.. raw:: html

   </p>

.. raw:: html

   <!-- @@@resume -->

.. raw:: html

   <table class="qmlname">

.. raw:: html

   <tr valign="top" id="start-method">

.. raw:: html

   <td class="tblQmlFuncNode">

.. raw:: html

   <p>

void start()

.. raw:: html

   </p>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   </table>

.. raw:: html

   <p>

Starts the simulation if it has not already running.

.. raw:: html

   </p>

.. raw:: html

   <p>

See also stop, restart, and running.

.. raw:: html

   </p>

.. raw:: html

   <!-- @@@start -->

.. raw:: html

   <table class="qmlname">

.. raw:: html

   <tr valign="top" id="stop-method">

.. raw:: html

   <td class="tblQmlFuncNode">

.. raw:: html

   <p>

void stop()

.. raw:: html

   </p>

.. raw:: html

   </td>

.. raw:: html

   </tr>

.. raw:: html

   </table>

.. raw:: html

   <p>

Stops the simulation if it is running.

.. raw:: html

   </p>

.. raw:: html

   <p>

See also start, restart, and running.

.. raw:: html

   </p>

.. raw:: html

   <!-- @@@stop -->


